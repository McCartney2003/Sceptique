# -*- coding: utf-8 -*-
"""Public Image Predictor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sxKyJfBj9huqU_BVewwp2rT0Ys1o1GTw
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline

# from GoogleNews import GoogleNews
# from newspaper import Article
# from newspaper import Config
import pandas as pd
import nltk
nltk.download('punkt')

import torch
!pip install flair
import flair

# start_date=[]
# end_date=[]
# print("Enter the starting Date in mm/dd/yyyy format")
# start_date=input()
# print("Enter the Last Date in mm/dd/yyyy format")
# end_date=input()

# ##Here we can take the input of date and name of celebrity:

# googlenews=GoogleNews(start=start_date,end=end_date)  ##Date input function can be created using html and css:

# celebrity = []
# celebrity = input("Enter The Celebrity Name: ")
# googlenews.search(celebrity)
# result=googlenews.result()
# df=pd.DataFrame(result)  ##This only stores the articles on the first page

# ##This will store 30 articles, we can also change the number:

# for i in range(1,3):
#     googlenews.getpage(i)
#     result=googlenews.result()
#     df=pd.DataFrame(result)

# df

# df.shape

# ## Here the description section is not giving the full aticles text, so we are using newspaper module:

# from newspaper import Article
# from newspaper import Config

# ##We have to take the user_agent somehow from every machine for the downloading error:

# # user_agent = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36'  ##Yogendra's Machine user_agent
# # config = Config()
# # config.browser_user_agent = user_agent

# list = []
# for ind in df.index:
#     dict1={}
#     article = Article(df['link'][ind])
#     # , config=config)
#     try:
#       article.download()
#       article.parse()
#       article.nlp()
#       dict1['Date']=df['date'][ind]  
#       dict1['Media']=df['media'][ind]
#       dict1['Title']=str(article.title)
#       dict1['Article']=str(article.text)
#       list.append(dict1)
#     except:
#       continue
# news_df=pd.DataFrame(list)

# news_df.replace(r'^\s*$', np.nan, regex=True,inplace=True)
# news_df.dropna()
# news_df

# news_df.iat[12,3]

from flair.models import TextClassifier
from flair.data import Sentence
from segtok.segmenter import split_single
classifier = TextClassifier.load('en-sentiment')

news_df=pd.read_csv('/content/news_authenticator.csv')
news_df.drop('Unnamed: 0',axis=1, inplace=True)
news_df

news_df = news_df.loc[news_df["Authenticity"] == 'Real' ]
news_df

# Define a function to get Flair sentiment prediction score
def score_flair(text):
  str(text)
  sentence = Sentence(text)
  classifier.predict(sentence)
  score = sentence.labels[0].score
  value = sentence.labels[0].value
  return score, value

# Get sentiment score for each review
news_df['scores_flair'] = news_df['Article'].apply(lambda s: score_flair(s)[0])
# Predict sentiment label for each review
news_df['pred_flair'] = news_df['Article'].apply(lambda s: score_flair(s)[1])
# Check the distribution of the score
news_df['scores_flair'].describe()

news_df

from plotly import graph_objs as go
import plotly.express as px
import plotly.figure_factory as ff
from collections import Counter

fig = px.pie(news_df, names='pred_flair',
             title='Celebrity Images',
             hover_data=['pred_flair'])
fig.update_traces(textposition='inside', textinfo='percent+label')
fig.show()

